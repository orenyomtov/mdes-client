/**
 * MDES for Merchants
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed.  All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded.  Each API URI includes the major and minor version of API that it conforms to.  This will allow multiple concurrent versions of the API to be deployed simultaneously. <br> __Authentication__ Mastercard uses OAuth 1.0a with body hash extension for authenticating the API clients. This requires every request that you send to  Mastercard to be signed with an RSA private key. A private-public RSA key pair must be generated consisting of: <br> 1 . A private key for the OAuth signature for API requests. It is recommended to keep the private key in a password-protected or hardware keystore. <br> 2. A public key is shared with Mastercard during the project setup process through either a certificate signing request (CSR) or the API Key Generator. Mastercard will use the public key to verify the OAuth signature that is provided on every API call.<br>  An OAUTH1.0a signer library is available on [GitHub](https://github.com/Mastercard/oauth1-signer-java) <br>  __Encryption__<br>  All communications between Issuer web service and the Mastercard gateway is encrypted using TLS. <br> __Additional Encryption of Sensitive Data__ In addition to the OAuth authentication, when using MDES Digital Enablement Service, any PCI sensitive and all account holder Personally Identifiable Information (PII) data must be encrypted. This requirement applies to the API fields containing encryptedData. Sensitive data is encrypted using a symmetric session (one-time-use) key. The symmetric session key is then wrapped with an RSA Public Key supplied by Mastercard during API setup phase (the Customer Encryption Key). <br>  Java Client Encryption Library available on [GitHub](https://github.com/Mastercard/client-encryption-java) 
 *
 * The version of the OpenAPI document: 1.3.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DecisioningData from './DecisioningData';
import FundingAccountInfo from './FundingAccountInfo';

/**
 * The TokenizeRequestSchema model module.
 * @module model/TokenizeRequestSchema
 * @version 1.3.0
 */
class TokenizeRequestSchema {
    /**
     * Constructs a new <code>TokenizeRequestSchema</code>.
     * @alias module:model/TokenizeRequestSchema
     * @param tokenType {String} The type of Token requested. Must be CLOUD       __Max Length:32__    
     * @param tokenRequestorId {String} 11-digit numeric ID provided by Mastercard that identifies the Token Requestor.  
     * @param taskId {String} Identifier for this task as assigned by the Token Requestor, unique across a given Token Requestor Identifier. May be used in the Get Task Status API to query the status of this task.      __Max Length:64__ 
     * @param fundingAccountInfo {module:model/FundingAccountInfo} 
     */
    constructor(tokenType, tokenRequestorId, taskId, fundingAccountInfo) { 
        
        TokenizeRequestSchema.initialize(this, tokenType, tokenRequestorId, taskId, fundingAccountInfo);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, tokenType, tokenRequestorId, taskId, fundingAccountInfo) { 
        obj['tokenType'] = tokenType;
        obj['tokenRequestorId'] = tokenRequestorId;
        obj['taskId'] = taskId;
        obj['fundingAccountInfo'] = fundingAccountInfo;
    }

    /**
     * Constructs a <code>TokenizeRequestSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TokenizeRequestSchema} obj Optional instance to populate.
     * @return {module:model/TokenizeRequestSchema} The populated <code>TokenizeRequestSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TokenizeRequestSchema();

            if (data.hasOwnProperty('responseHost')) {
                obj['responseHost'] = ApiClient.convertToType(data['responseHost'], 'String');
            }
            if (data.hasOwnProperty('requestId')) {
                obj['requestId'] = ApiClient.convertToType(data['requestId'], 'String');
            }
            if (data.hasOwnProperty('tokenType')) {
                obj['tokenType'] = ApiClient.convertToType(data['tokenType'], 'String');
            }
            if (data.hasOwnProperty('tokenRequestorId')) {
                obj['tokenRequestorId'] = ApiClient.convertToType(data['tokenRequestorId'], 'String');
            }
            if (data.hasOwnProperty('taskId')) {
                obj['taskId'] = ApiClient.convertToType(data['taskId'], 'String');
            }
            if (data.hasOwnProperty('fundingAccountInfo')) {
                obj['fundingAccountInfo'] = FundingAccountInfo.constructFromObject(data['fundingAccountInfo']);
            }
            if (data.hasOwnProperty('consumerLanguage')) {
                obj['consumerLanguage'] = ApiClient.convertToType(data['consumerLanguage'], 'String');
            }
            if (data.hasOwnProperty('tokenizationAuthenticationValue')) {
                obj['tokenizationAuthenticationValue'] = ApiClient.convertToType(data['tokenizationAuthenticationValue'], 'String');
            }
            if (data.hasOwnProperty('decisioningData')) {
                obj['decisioningData'] = DecisioningData.constructFromObject(data['decisioningData']);
            }
        }
        return obj;
    }


}

/**
 * \"The host that originated the request. Future calls in the same conversation may be routed to this host. Must be provided as: host[:port][/contextRoot] Where port and contextRoot are optional. If contextRoot is not provided, the default (per the URL Scheme) is assumed and must be used.\" 
 * @member {String} responseHost
 */
TokenizeRequestSchema.prototype['responseHost'] = undefined;

/**
 * Unique identifier for the request. 
 * @member {String} requestId
 */
TokenizeRequestSchema.prototype['requestId'] = undefined;

/**
 * The type of Token requested. Must be CLOUD       __Max Length:32__    
 * @member {String} tokenType
 */
TokenizeRequestSchema.prototype['tokenType'] = undefined;

/**
 * 11-digit numeric ID provided by Mastercard that identifies the Token Requestor.  
 * @member {String} tokenRequestorId
 */
TokenizeRequestSchema.prototype['tokenRequestorId'] = undefined;

/**
 * Identifier for this task as assigned by the Token Requestor, unique across a given Token Requestor Identifier. May be used in the Get Task Status API to query the status of this task.      __Max Length:64__ 
 * @member {String} taskId
 */
TokenizeRequestSchema.prototype['taskId'] = undefined;

/**
 * @member {module:model/FundingAccountInfo} fundingAccountInfo
 */
TokenizeRequestSchema.prototype['fundingAccountInfo'] = undefined;

/**
 * Language preference selected by the consumer. Formatted as an ISO- 639-1 two-letter language code.    __Max Length:2__ 
 * @member {String} consumerLanguage
 */
TokenizeRequestSchema.prototype['consumerLanguage'] = undefined;

/**
 * The Tokenization Authentication Value (TAV) as cryptographically signed by the Issuer to authorize this digitization request.      __Max Length:2048__ 
 * @member {String} tokenizationAuthenticationValue
 */
TokenizeRequestSchema.prototype['tokenizationAuthenticationValue'] = undefined;

/**
 * @member {module:model/DecisioningData} decisioningData
 */
TokenizeRequestSchema.prototype['decisioningData'] = undefined;






export default TokenizeRequestSchema;

